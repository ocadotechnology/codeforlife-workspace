// This file is used to define global submodule-configs for the submodules
// within CFL's workspace. This saves us having to manually repeat common
// configurations across 2+ submodules and avoids human error when accidentally
// copy/pasting something incorrectly.
//
// WARNING: This file is written in JSONC format (JSON with comments). However,
//  only single lines comments with no preceding text are allowed. For example:
//  - "// single-line comment, no preceding text" âœ…
//  - "{"age": 27} // single-line comment, some preceding text" ðŸš«
//  - "/* multi-line comment, no preceding text */" ðŸš«
//  - "{"age": 27} /* multi-line comment, some preceding text */" ðŸš«
//
// These configs are processed by .submodules/__main__.py. To understand more
// about the shape of this data, please read .submodules/configs.py.
{
  "base": {
    "description": "Base configuration to be inherited by all other configurations.",
    "devcontainer": {
      "dockerComposeFile": [
        "../docker-compose.yml"
      ],
      "service": "base-service",
      "shutdownAction": "none",
      "remoteUser": "root",
      "customizations": {
        "vscode": {
          "extensions": [
            "visualstudioexptteam.vscodeintellicode",
            "github.vscode-pull-request-github",
            "redhat.vscode-yaml",
            "davidanson.vscode-markdownlint",
            "bierner.markdown-mermaid",
            "streetsidesoftware.code-spell-checker",
            "tamasfe.even-better-toml"
          ]
        }
      }
    },
    "vscode": {
      "settings": {
        "editor.tabSize": 2,
        "editor.rulers": [
          80
        ],
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
          "source.organizeImports": "explicit"
        },
        "[md]": {
          "editor.tabSize": 4
        },
        "cSpell.words": [
          "codeforlife",
          "klass",
          "ocado",
          "kurono",
          "pipenv"
        ]
      }
    },
    "workspace": {
      "folders": [
        {
          "path": "."
        }
      ],
      "settings": {
        "workbench.colorCustomizations": {
          "editorRuler.foreground": "#008000"
        }
      }
    }
  },
  "javascript": {
    "inherits": [
      "base"
    ],
    "description": "A devcontainer with a javascript environment.",
    "submodules": [
      "codeforlife-package-javascript"
    ],
    "devcontainer": {
      "features": {
        "ghcr.io/devcontainers/features/node:1": {
          "version": "18"
        }
      },
      "customizations": {
        "vscode": {
          "extensions": [
            "dbaeumer.vscode-eslint"
            // "dsznajder.es7-react-js-snippets",
            // "ecmel.vscode-html-css",
            // "jock.svg"
          ]
        }
      }
    },
    "vscode": {
      "settings": {
        "typescript.preferences.quoteStyle": "single"
      },
      "codeSnippets": {
        "javascript.module.doccomment": {
          "prefix": [
            "/"
          ],
          "scope": "javascript,typescript,javascriptreact,typescriptreact",
          "body": [
            "/**",
            " * Â© Ocado Group",
            " * Created on $CURRENT_DATE/$CURRENT_MONTH/$CURRENT_YEAR at $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND($CURRENT_TIMEZONE_OFFSET).",
            " *",
            " * ${1:__description__}",
            " */"
          ]
        }
      }
    }
  },
  "python": {
    "inherits": [
      "base"
    ],
    "description": "A devcontainer with a python environment.",
    "submodules": [
      "codeforlife-deploy-appengine",
      "codeforlife-package-python",
      "codeforlife-portal",
      "rapid-router"
    ],
    "devcontainer": {
      "features": {
        "ghcr.io/devcontainers/features/python:1": {
          "version": "3.8",
          "installTools": false
        },
        "ghcr.io/devcontainers-contrib/features/pipenv:2": {
          "version": "2023.11.15"
        }
      },
      "customizations": {
        "vscode": {
          "extensions": [
            "ms-python.python",
            "ms-python.debugpy",
            "ms-python.pylint",
            "ms-python.isort",
            "ms-python.vscode-pylance",
            "ms-python.mypy-type-checker",
            "ms-python.black-formatter",
            "qwtel.sqlite-viewer",
            "njpwerner.autodocstring"
          ]
        }
      }
    },
    "vscode": {
      "settings": {
        "python.defaultInterpreterPath": ".venv/bin/python",
        "python.testing.unittestEnabled": false,
        "python.testing.pytestEnabled": true,
        "[python]": {
          "editor.tabSize": 4,
          "editor.defaultFormatter": "ms-python.black-formatter"
        },
        "files.exclude": {
          "**/__pycache__": true,
          "**/.pytest_cache": true,
          "**/.mypy_cache": true,
          "**/.hypothesis": true
        },
        "isort.path": [
          ".venv/bin/python",
          "-m",
          "isort"
        ],
        "isort.args": [
          "--settings-file=pyproject.toml"
        ],
        "black-formatter.path": [
          ".venv/bin/python",
          "-m",
          "black"
        ],
        "black-formatter.args": [
          "--config",
          "pyproject.toml"
        ],
        "mypy-type-checker.path": [
          ".venv/bin/python",
          "-m",
          "mypy"
        ],
        "mypy-type-checker.args": [
          "--config-file=pyproject.toml"
        ],
        "pylint.path": [
          ".venv/bin/python",
          "-m",
          "pylint"
        ],
        "pylint.args": [
          "--rcfile=pyproject.toml"
        ],
        "python.testing.pytestArgs": [
          "-n=auto",
          "-c=pyproject.toml",
          "."
        ]
      },
      "launch": {
        "version": "0.2.0",
        "configurations": [
          {
            "name": "Python: Current File",
            "type": "debugpy",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal",
            "justMyCode": false
          },
          {
            "name": "Pytest",
            "type": "debugpy",
            "request": "test",
            "justMyCode": false,
            "presentation": {
              "hidden": true
            }
          }
        ]
      },
      "codeSnippets": {
        "python.module.docstring": {
          "prefix": [
            "\"\"\"",
            "'''"
          ],
          "scope": "python",
          "body": [
            "\"\"\"",
            "Â© Ocado Group",
            "Created on $CURRENT_DATE/$CURRENT_MONTH/$CURRENT_YEAR at $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND($CURRENT_TIMEZONE_OFFSET).",
            "",
            "${1:__description__}",
            "\"\"\""
          ]
        },
        "python.pylint.disable-next": {
          "prefix": [
            "# pylint"
          ],
          "scope": "python",
          "body": [
            "# pylint: disable-next=${1:__code_name__}"
          ]
        },
        "python.mypy.ignore": {
          "prefix": [
            "# type"
          ],
          "scope": "python",
          "body": [
            "# type: ignore[${1:__code_name__}]"
          ]
        }
      }
    },
    "workspace": {
      "folders": [],
      "settings": {
        "autoDocstring.customTemplatePath": ".vscode/extensions/autoDocstring/docstring.mustache"
      }
    }
  },
  "service": {
    "inherits": [
      "javascript",
      "python"
    ],
    "description": "A devcontainer for a micro-service.",
    "submodules": [
      "codeforlife-service-template",
      "codeforlife-portal-react",
      "codeforlife-sso"
    ],
    "devcontainer": {
      "postCreateCommand": "./setup",
      "mounts": [
        "source=./codeforlife-package-javascript,target=/workspace/codeforlife-package-javascript,type=bind,consistency=cached",
        "source=./codeforlife-package-python,target=/workspace/codeforlife-package-python,type=bind,consistency=cached"
      ]
    },
    "vscode": {
      "settings": {
        "python.defaultInterpreterPath": "backend/.venv/bin/python",
        "python.analysis.extraPaths": [
          "../codeforlife-package-python"
        ],
        "!isort.path": [
          "backend/.venv/bin/python",
          "-m",
          "isort"
        ],
        "!isort.args": [
          "--settings-file=backend/pyproject.toml"
        ],
        "black-formatter.cwd": "${workspaceFolder}/backend",
        "mypy-type-checker.cwd": "${workspaceFolder}/backend",
        "pylint.cwd": "${workspaceFolder}/backend",
        "python.testing.cwd": "${workspaceFolder}/backend"
      },
      "tasks": {
        "version": "2.0.0",
        "tasks": [
          {
            "label": "start-react-dev-server",
            "isBackground": true,
            "type": "npm",
            "script": "start",
            "options": {
              "env": {
                "BROWSER": "none"
              }
            },
            "path": "frontend",
            "problemMatcher": []
          },
          {
            "label": "pipenv-install-dev",
            "type": "shell",
            "options": {
              "cwd": "${workspaceFolder}/backend"
            },
            "command": "pipenv install --dev"
          },
          {
            "label": "migrate-db",
            "type": "shell",
            "options": {
              "cwd": "${workspaceFolder}/backend"
            },
            "dependsOn": [
              "pipenv-install-dev"
            ],
            "command": "pipenv run python ./manage.py migrate"
          }
        ]
      },
      "launch": {
        "version": "0.2.0",
        "configurations": [
          {
            "name": "React Dev Server",
            "type": "chrome",
            "request": "launch",
            "url": "http://localhost:3000",
            "preLaunchTask": "start-react-dev-server"
          },
          {
            "name": "Django Server",
            "type": "debugpy",
            "request": "launch",
            "django": true,
            "justMyCode": false,
            "program": "${workspaceFolder}/backend/manage.py",
            "?args": [
              "runserver",
              "localhost:8000"
            ],
            "preLaunchTask": "migrate-db"
          }
        ]
      }
    },
    "workspace": {
      "folders": [
        {
          "path": "../codeforlife-package-python",
          "name": "package-python"
        },
        {
          "path": "../codeforlife-package-javascript",
          "name": "package-javascript"
        }
      ]
    }
  },
  "service+sso": {
    "inherits": [
      "service"
    ],
    "description": "A service that also runs the SSO service in the background.",
    // TODO: set submodules after testing how this would work.
    "submodules": [],
    "devcontainer": {
      "mounts": [
        "source=./codeforlife-sso,target=/workspace/codeforlife-sso,type=bind,consistency=cached"
      ]
    },
    "vscode": {
      "tasks": {
        "version": "2.0.0",
        "tasks": [
          {
            "label": "run-sso-server",
            "type": "shell",
            "isBackground": true,
            "options": {
              "cwd": "${workspaceFolder}/../codeforlife-sso/backend",
              "env": {
                "DB_NAME": "${fileWorkspaceFolder}/backend/db.sqlite3",
                "SERVICE_NAME": "sso",
                "SERVICE_PORT": "8001"
              }
            },
            "dependsOn": [
              "migrate-db"
            ],
            "command": "pipenv run python ./manage.py runserver localhost:8001"
          }
        ]
      },
      "launch": {
        "version": "0.2.0",
        "configurations": [
          {
            "name": "Django Server",
            "type": "python",
            "request": "launch",
            "django": true,
            "justMyCode": false,
            "program": "${fileWorkspaceFolder}/backend/manage.py",
            "args": [
              "runserver",
              "localhost:8000"
            ],
            "preLaunchTask": "run-sso-server"
          }
        ]
      }
    },
    "workspace": {
      "folders": [
        {
          "path": "../codeforlife-sso",
          "name": "sso"
        }
      ]
    }
  }
}