#!/bin/bash

# A CLI called for each frontend service.
#  - The 1st arg is the name of the function.
#  - All the remaining args are the arguments of the function.

# ------------------------------------------------------------------------------
# Variables
# ------------------------------------------------------------------------------

# The path to the frontend directory in the workspace.
frontend_dir=".workspace/frontend"

# ------------------------------------------------------------------------------
# Private/Utility Functions
# ------------------------------------------------------------------------------

function _vite() { yarn run vite $@; }

function _vitest() { yarn run vitest $@; }

function _eslint() { yarn run eslint $@; }

function _typescript() { yarn run tsc $@; }

function _prettier() {
  local options="$@"

  if [[ "$options" =~ --config ]]; then
    exit=1 echo_error "config cannot be set manually"
  fi
  options+=" --config=$frontend_dir/.prettierrc.json"

  if [[ "$options" =~ --ignore-path ]]; then
    exit=1 echo_error "ignore paths cannot be set manually"
  fi
  options+=" --ignore-path=$frontend_dir/.prettierignore"
  if [ -f .prettierignore ]; then options+=" --ignore-path=.prettierignore"; fi

  yarn run prettier $options
}

function _make_vite_options() {
  local options="$@"

  local mode_keys="(-m|--mode)( |=)"
  if [[ ! "$options" =~ $mode_keys ]]; then
    options+=" --mode ."
  elif [[ ! "$options" =~ $mode_keys(\.|development|staging|production) ]]; then
    exit=1 echo_error \
      "mode must be set to one of: . (local), development, staging, production."
  fi

  if [[ "$options" =~ (-c|--config)( |=) ]]; then
    exit=1 echo_error "config cannot be set manually"
  fi
  options+=" --config $(
    if [ -f vite.config.ts ]; then
      echo "vite.config.ts"
    else
      echo "$frontend_dir/vite.config.ts"
    fi
  )"

  echo "$options"
}

function _vite:build() { _vite build $@; }

function _vite:build:ssr() {
  if eval_bool "${make_options:-1}"; then
    on_success="_vite:build" handle_exit _make_vite_options "$@"
  else
    _vite:build "$@"
  fi
}

function _run() { NODE_ENV="$1" node server; }

# ------------------------------------------------------------------------------
# Public/Callable Functions
# ------------------------------------------------------------------------------

function setup() {
  # Setup your workspace and local environment.
  function install_packages() { yarn install --production=false; }

  if eval_bool "${workspace:-1}"; then
    function install_workspace_packages() {
      (
        cd $frontend_dir
        install_packages
      )
    }
    callback="install_workspace_packages" step \
      Installing packages in $frontend_dir
    callback="install_packages" step \
      Installing packages in $(pwd)
  else
    install_packages
  fi
}

function hard_install() {
  # Cleanup and setup your workspace and local environment.
  local workspace="${workspace:-1}"

  function _cleanup() {
    if [ -f "yarn.lock" ]; then echo "Deleting yarn.lock"; fi
    rm -f yarn.lock

    if [ -e "node_modules" ]; then echo "Deleting node_modules"; fi
    rm -rf node_modules
  }

  function cleanup() {
    callback="yarn cache clean codeforlife" step \
      Clearing codeforlife package from yarn cache

    if eval_bool "$workspace"; then
      function cleanup_workspace() {
        (
          cd $frontend_dir
          _cleanup
        )
      }
      callback="cleanup_workspace" step \
        Cleaning up in $frontend_dir
    fi

    callback="_cleanup" step \
      Cleaning up in $(pwd)
  }

  callback="cleanup" step Cleaning up JS environment
  workspace="$workspace" callback="setup" step Setting up JS environment
}

function build:client() {
  # Build production-ready, client-side entry-point.
  # https://vite.dev/guide/cli
  _vite:build:ssr --outDir dist/client "$@"
}

function build:server() {
  # Build production-ready, server-side entry-point.
  # https://vite.dev/guide/cli
  _vite:build:ssr --ssr src/entry-server.tsx --outDir dist/server "$@"
}

function build() {
  # Build production-ready, client-side and server-side entry-point.
  function on_success() {
    local options="$@"

    function callback() { make_options=0 build:client "$options"; }
    step Building client-side code

    function callback() { make_options=0 build:server "$options"; }
    step Building server-side code
  }
  handle_exit _make_vite_options "$@"
}

function run:dev() {
  # Launch dev server with server-side rendering.
  callback="setup" step Setting up JS environment

  function callback() { _run development; }
  step Running server in Node.js development environment
}

function run:prod() {
  # Run server in production environment.
  callback="setup" step Setting up JS environment

  if eval_bool "${build:-1}"; then
    function callback() { build --mode="production"; }
    step Building app in Vite production mode
  fi

  function callback() { _run production; }
  step Running server in Node production environment
}

function test() {
  # Run tests.
  # https://vitest.dev/guide/cli
  function on_success() { _vitest run "$@"; }
  handle_exit _make_vite_options "$@"
}

function test:coverage:report() {
  # Run tests and generate coverage report.
  # https://vitest.dev/guide/cli
  test --coverage "$@"
}

function test:coverage:check() {
  # Run tests and check coverage thresholds.
  # https://vitest.dev/guide/cli
  test \
    --reporter=verbose \
    --coverage.thresholds.lines=90 \
    --coverage.thresholds.functions=90 \
    --coverage.thresholds.branches=90 \
    --coverage.thresholds.statements=90 \
    "$@"
}

function test:coverage() {
  if github_repo_owner_is_ocado_tech; then
    test:coverage:report $@
  else
    test:coverage:check $@
  fi
}

function test:ui() {
  # Launch text explorer UI.
  # https://vitest.dev/guide/cli
  function on_success() { _vitest --ui "$@"; }
  handle_exit _make_vite_options "$@"
}

function format() {
  # Auto-fix known formatting issues.
  # https://prettier.io/docs/cli
  _prettier --write "${@:-.}"
}

function format:check() {
  # Check formatting issues.
  # https://prettier.io/docs/cli
  _prettier --check --write=false "${@:-.}"
}

function code:check() {
  # Find linting issues.
  # https://eslint.org/docs/latest/use/command-line-interface
  _eslint --max-warnings=0 "${@:-.}"
}

function code:fix() {
  # Auto-fix known linting issues.
  # https://eslint.org/docs/latest/use/command-line-interface
  _eslint --fix "${@:-.}"
}

function types:check() {
  # Check static types.
  # https://www.typescriptlang.org/docs/handbook/compiler-options.html
  _typescript --build tsconfig.json
}

function check() {
  # Run all checks.
  callback="setup" step Setting up JS environment
  callback="format:check" step Checking format
  callback="code:check" step Checking code
  callback="types:check" step Checking types
  callback="test" step Running tests
}

# ------------------------------------------------------------------------------
# Entrypoint
# ------------------------------------------------------------------------------

# Must be the last line in the script!
eval "$(.workspace/.scripts/main run_script $(readlink -f "$0") $@)"
