#!/bin/bash

# A CLI called for each frontend service.
#  - The 1st arg is the name of the function.
#  - All the remaining args are the arguments of the function.

# ------------------------------------------------------------------------------
# Variables
# ------------------------------------------------------------------------------

# The ID of the Ocado Technology GitHub organization.
# https://github.com/ocadotechnology
ocado_tech_org_id=${OCADO_TECH_ORG_ID:-2088731}

# The path of the workspace configs directory.
# https://docs.github.com/en/actions/reference/workflows-and-actions/variables#default-environment-variables
workspace_configs_dir="$(
  if [ "$CI" = "true" ]; then
    echo ".workspace"
  else
    echo "/codeforlife-workspace/configs/frontend"
  fi
)"

# A global array to keep track of the step number at each level of nesting.
declare -ga step_counters=()

# A global variable to track the current depth of nesting.
declare -gi step_depth=0

# ------------------------------------------------------------------------------
# Private/Utility Functions
# ------------------------------------------------------------------------------

function _handle_exit() {
  local output
  local status

  output="$($@)"
  status=$?

  if [ "$status" -ne 0 ]; then
    ${on_error:-echo} "$output"
    exit "$status"
  fi

  ${on_success:-on_success} "$output"
}

function _step() {
  # Increment the current nesting depth.
  ((step_depth++))

  # Initialize the counter for the new depth if it doesn't exist.
  if [[ -z "${step_counters[step_depth - 1]}" ]]; then
    step_counters[step_depth - 1]=0
  fi

  # Increment the counter for the current depth.
  ((step_counters[step_depth - 1]++))

  # Remove any counters for deeper levels, as we're not in a nested call from a previous run.
  # This is important to reset the state correctly for a new sequence of calls.
  if [[ step_depth -lt ${#step_counters[@]} ]]; then
    for ((i = step_depth; i < ${#step_counters[@]}; i++)); do
      unset step_counters[$i]
    done
  fi

  # Build the step number string (e.g., "1", "1.1", "1.1.1").
  local step_string
  local delimiter=""
  for ((i = 0; i < step_depth; i++)); do
    step_string+="$delimiter${step_counters[$i]}"
    delimiter="."
  done

  # Print the current step number.
  echo -------------------------------------------------------------------------
  echo "ðŸ‘£ Step $step_string: $@"
  echo -------------------------------------------------------------------------

  # Call the provided function (the callback).
  ${callback:-callback}

  # Decrement the depth as we exit this call.
  ((step_depth--))
}

function _vite() { yarn run vite $@; }

function _vitest() { yarn run vitest $@; }

function _eslint() { yarn run eslint $@; }

function _typescript() { yarn run tsc $@; }

function _prettier() {
  local options="$@"

  if [[ "$options" =~ --config ]]; then
    echo "config cannot be set manually"
    exit 1
  fi
  options+=" --config=$workspace_configs_dir/.prettierrc.json"

  if [[ "$options" =~ --ignore-path ]]; then
    echo "ignore paths cannot be set manually"
    exit 1
  fi
  options+=" --ignore-path=$workspace_configs_dir/.prettierignore"
  if [ -f .prettierignore ]; then options+=" --ignore-path=.prettierignore"; fi

  yarn run prettier $options
}

function _make_vite_options() {
  local options="$@"

  local mode_keys="(-m|--mode)( |=)"
  if [[ ! "$options" =~ $mode_keys ]]; then
    options+=" --mode ."
  elif [[ ! "$options" =~ $mode_keys(\.|development|staging|production) ]]; then
    echo "mode must be set to one of: . (local), development, staging, production."
    exit 1
  fi

  if [[ "$options" =~ (-c|--config)( |=) ]]; then
    echo "config cannot be set manually"
    exit 1
  fi
  options+=" --config $(
    if [ -f vite.config.ts ]; then
      echo "vite.config.ts"
    else
      echo "./node_modules/@codeforlife/workspace/vite.config.ts"
    fi
  )"

  echo "$options"
}

function _vite:build() { _vite build $@; }

function _vite:build:ssr() {
  if [ "${make_options:-1}" -eq 1 ]; then
    on_success="_vite:build" _handle_exit _make_vite_options "$@"
  else
    _vite:build "$@"
  fi
}

function _run() { NODE_ENV="$1" node server; }

# ------------------------------------------------------------------------------
# Public/Callable Functions
# ------------------------------------------------------------------------------

function setup() {
  # Setup your local environment.
  yarn install --production=false
}

function hard-install() {
  # Delete the existing node_modules and yarn.lock and install all dependencies.
  if [ ! -e "node_modules" ]; then
    echo "node_modules not found"
    exit 1
  fi
  rm -f yarn.lock
  rm -rf node_modules
  yarn cache clean codeforlife
  setup
}

function build:client() {
  # Build production-ready, client-side entry-point.
  # https://vite.dev/guide/cli
  _vite:build:ssr --outDir dist/client "$@"
}

function build:server() {
  # Build production-ready, server-side entry-point.
  # https://vite.dev/guide/cli
  _vite:build:ssr --ssr src/entry-server.tsx --outDir dist/server "$@"
}

function build() {
  # Build production-ready, client-side and server-side entry-point.
  function on_success() {
    local options="$@"

    function callback() { make_options=0 build:client "$options"; }
    _step Building client-side code

    function callback() { make_options=0 build:server "$options"; }
    _step Building server-side code
  }
  _handle_exit _make_vite_options "$@"
}

function run:dev() {
  # Launch dev server with server-side rendering.
  callback="setup" _step Setting up JS environment

  function callback() { _run development; }
  _step Running server in Node.js development environment
}

function run:prod() {
  # Run server in production environment.
  callback="setup" _step Setting up JS environment

  if [ "${build:-1}" -eq 1 ]; then
    function callback() { build --mode="production"; }
    _step Building app in Vite production mode
  fi

  function callback() { _run production; }
  _step Running server in Node production environment
}

function test() {
  # Run tests.
  # https://vitest.dev/guide/cli
  _vitest run "$@"
}

function test:coverage:report() {
  # Run tests and generate coverage report.
  # https://vitest.dev/guide/cli
  _vitest run --coverage "$@"
}

function test:coverage:check() {
  # Run tests and check coverage thresholds.
  # https://vitest.dev/guide/cli
  _vitest run \
    --reporter=verbose \
    --coverage.thresholds.lines=90 \
    --coverage.thresholds.functions=90 \
    --coverage.thresholds.branches=90 \
    --coverage.thresholds.statements=90 \
    "$@"
}

function test:coverage() {
  if [ "$GITHUB_REPOSITORY_OWNER_ID" -eq $ocado_tech_org_id ]; then
    test:coverage:report $@
  else
    test:coverage:check $@
  fi
}

function test:ui() {
  # Launch text explorer UI.
  # https://vitest.dev/guide/cli
  _vitest --ui "$@"
}

function format() {
  # Auto-fix known formatting issues.
  # https://prettier.io/docs/cli
  _prettier --write "${@:-.}"
}

function format:check() {
  # Check formatting issues.
  # https://prettier.io/docs/cli
  _prettier --check --write=false "${@:-.}"
}

function code:check() {
  # Find linting issues.
  # https://eslint.org/docs/latest/use/command-line-interface
  _eslint --max-warnings=0 "${@:-.}"
}

function code:fix() {
  # Auto-fix known linting issues.
  # https://eslint.org/docs/latest/use/command-line-interface
  _eslint --fix "${@:-.}"
}

function types:check() {
  # Check static types.
  # https://www.typescriptlang.org/docs/handbook/compiler-options.html
  _typescript --build tsconfig.json
}

# ------------------------------------------------------------------------------
# Entrypoint
# ------------------------------------------------------------------------------

if [ $# -eq 0 ]; then
  echo "Expected call signature: {func_name*} {...options?}"
  exit 1
fi

if [[ "$1" =~ ^_ ]]; then
  echo "You cannot call a private function."
  exit 1
fi

$1 ${@:2} # Call function by name and pass the remaining arguments.
