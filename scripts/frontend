#!/bin/bash

# A CLI called for each frontend service.
#  - The 1st arg is the name of the function.
#  - All the remaining args are the arguments of the function.

set -e

# ------------------------------------------------------------------------------
# Variables
# ------------------------------------------------------------------------------

# The ID of the Ocado Technology GitHub organization.
# https://github.com/ocadotechnology
ocado_tech_org_id=${OCADO_TECH_ORG_ID:-2088731}

# The path of the workspace configs directory.
# https://docs.github.com/en/actions/reference/workflows-and-actions/variables#default-environment-variables
workspace_configs_dir="$(
  if [ "$CI" = "true" ]; then
    echo ".workspace"
  else
    echo "/codeforlife-workspace/configs/frontend"
  fi
)"

# ------------------------------------------------------------------------------
# Private/Utility Functions
# ------------------------------------------------------------------------------

function _prettier() {
  local options="$@"

  if [[ "$options" =~ --config ]]; then
    echo "config cannot be set manually"
    exit 1
  fi
  options+=" --config=$workspace_configs_dir/.prettierrc.json"

  if [[ "$options" =~ --ignore-path ]]; then
    echo "ignore paths cannot be set manually"
    exit 1
  fi
  options+=" --ignore-path=$workspace_configs_dir/.prettierignore"
  if [ -f .prettierignore ]; then options+=" --ignore-path=.prettierignore"; fi

  yarn run prettier $options
}

function _make_vite_options() {
  local options="$@"

  local mode_keys="(-m|--mode)"
  if [[ ! "$options" =~ $mode_keys ]]; then
    options+=" --mode ."
  elif [[ ! "$options" =~ $mode_keys( |=)(\.|development|staging|production) ]]; then
    echo "mode must be set to one of: . (local), development, staging, production."
    exit 1
  fi

  if [[ "$options" =~ (-c|--config) ]]; then
    echo "config cannot be set manually"
    exit 1
  fi
  options+=" --config $(
    if [ -f vite.config.ts ]; then
      echo "vite.config.ts"
    else
      echo "./node_modules/@codeforlife/workspace/vite.config.ts"
    fi
  )"

  echo "$options"
}

function _vite() {
  yarn run vite $(_make_vite_options "$@")
}

function _vitest() {
  yarn run vitest $(_make_vite_options "$@")
}

# ------------------------------------------------------------------------------
# Public/Callable Functions
# ------------------------------------------------------------------------------

function dev:server() {
  # Launch dev server with server-side rendering.
  node server
}

function dev:client() {
  # Launch dev server with client-side rendering.
  # https://vite.dev/guide/cli
  _vite "$@"
}

function build:client() {
  # Build production-ready, client-side entry-point.
  # https://vite.dev/guide/cli
  _vite build --outDir dist/client "$@"
}

function build:server() {
  # Build production-ready, server-side entry-point.
  # https://vite.dev/guide/cli
  _vite build --ssr src/entry-server.tsx --outDir dist/server "$@"
}

function build() {
  # Build production-ready, client-side and server-side entry-point.
  build:client $@
  build:server $@
}

function start() {
  # Run production-ready node server.
  # NOTE: Make sure to run build() first!
  NODE_ENV=production node server
}

function test() {
  # Run tests.
  # https://vitest.dev/guide/cli
  _vitest run "$@"
}

function test:coverage:report() {
  # Run tests and generate coverage report.
  # https://vitest.dev/guide/cli
  _vitest run --coverage "$@"
}

function test:coverage:check() {
  # Run tests and check coverage thresholds.
  # https://vitest.dev/guide/cli
  _vitest run \
    --reporter=verbose \
    --coverage.thresholds.lines=90 \
    --coverage.thresholds.functions=90 \
    --coverage.thresholds.branches=90 \
    --coverage.thresholds.statements=90 \
    "$@"
}

function test:coverage() {
  if [ "$GITHUB_REPOSITORY_OWNER_ID" -eq $ocado_tech_org_id ]; then
    test:coverage:report $@
  else
    test:coverage:check $@
  fi
}

function test:ui() {
  # Launch text explorer UI.
  # https://vitest.dev/guide/cli
  _vitest --ui "$@"
}

function format() {
  # Auto-fix known formatting issues.
  # https://prettier.io/docs/cli
  _prettier --write "${@:-.}"
}

function format:check() {
  # Check formatting issues.
  # https://prettier.io/docs/cli
  _prettier --check --write=false "${@:-.}"
}

function code:check() {
  # Find linting issues.
  # https://eslint.org/docs/latest/use/command-line-interface
  yarn run eslint --max-warnings=0 "${@:-.}"
}

function code:fix() {
  # Auto-fix known linting issues.
  # https://eslint.org/docs/latest/use/command-line-interface
  yarn run eslint --fix "${@:-.}"
}

function types:check() {
  # Check static types.
  # https://www.typescriptlang.org/docs/handbook/compiler-options.html
  yarn run tsc --build tsconfig.json
}

function setup() {
  # Setup your local environment.
  yarn install --production=false
}

function run:server() {
  # Run a local server-side Vite server.
  setup $@
  dev:server $@
}

function run:client() {
  # Run a local client-side Vite server.
  setup $@
  dev:client $@
}

function hard-install() {
  # Delete the existing node_modules and yarn.lock and install all dependencies.
  if [ ! -e "node_modules" ]; then
    echo "node_modules not found"
    exit 1
  fi
  rm -f yarn.lock
  rm -rf node_modules
  yarn cache clean codeforlife
  yarn install --production=false
}

# ------------------------------------------------------------------------------
# Entrypoint
# ------------------------------------------------------------------------------

func=$1  # Get function name.
shift    # Remove 1st argument.
$func $@ # Call function with remaining arguments.
