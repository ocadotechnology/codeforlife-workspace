name: "Code for Life - AWS - Create Resources"
description: "Create the AWS resources used in our environment."
inputs:
  # CLI
  region:
    description: "The region of the resources."
    required: true
    default: us-east-1
  access-key-id:
    description: "The ID of the AWS credentials."
    required: true
    default: test
  secret-access-key:
    description: "The secret of the AWS credentials."
    required: true
    default: test
  cli-version:
    description: "The version of the AWS CLI to install."
    required: true
    default: 2.26.1
  # SQS
  sqs-queues:
    description: "A CSV of AWS SQS queues to create. If using Django, this will default to the service's name."
    required: true
    default: ""
  # LocalStack
  localstack-debug:
    description: "Whether LocalStack is in debug mode."
    required: false
    default: "0"
  localstack-version:
    description: "The LocalStack version to set up."
    required: false
    default: "4.3.0"
  # Django
  django:
    description: "Whether the Django web framework is used."
    required: true
    default: "false"
runs:
  using: composite
  steps:
  # Based on inputs, determine what AWS services are required.
  - name: ⚙️ Get AWS Services
    id: get-aws-services
    shell: bash
    run: |
      # Empty string array to append AWS service names to.
      services=()

      # Check if creating SQS queues.
      if [ "${{ inputs.sqs-queues }}" != "" ] || \
         [ "${{ inputs.django }}" = "true" ]; then
        services+=("sqs")
      fi

      # Convert array to single-line CSV string.
      array_to_csv() {
        local IFS=","
        echo "${services[*]}"
      }

      # Output CSV to GitHub Actions.
      echo "services=$(array_to_csv)" >> $GITHUB_OUTPUT

  - name: 📥 Install AWS CLI
    if: steps.get-aws-services.outputs.services != ''
    uses: ocadotechnology/codeforlife-workspace/.github/actions/aws/install-cli@main
    with:
      version: ${{ inputs.cli-version }}

  - name: 🚀 Set Up LocalStack
    if: steps.get-aws-services.outputs.services != ''
    uses: LocalStack/setup-localstack@v0.2.4
    with:
      image-tag: ${{ inputs.localstack-version }}
      install-awslocal: "false"
      configuration: |
        DEBUG=${{ inputs.localstack-debug }}
        SERVICES=${{ steps.get-aws-services.outputs.services }}
        DEFAULT_REGION=${{ inputs.region }}

  - name: 🗂️ Get Service Name
    if: steps.get-aws-services.outputs.services != '' && inputs.django == 'true'
    id: get-service-name
    uses: ocadotechnology/codeforlife-workspace/.github/actions/service/backend/get-name@main
  
  - name: ⚙️ Set Environment Variables
    if: steps.get-aws-services.outputs.services != ''
    shell: bash
    run: | # Used by AWS CLI.
      echo "AWS_REGION=${{ inputs.region }}" >> $GITHUB_ENV
      echo "AWS_ACCESS_KEY_ID=${{ inputs.access-key-id }}" >> $GITHUB_ENV
      echo "AWS_SECRET_ACCESS_KEY=${{ inputs.secret-access-key }}" >> $GITHUB_ENV
      echo "AWS_ENDPOINT_URL=http://localhost:4566" >> $GITHUB_ENV

  - name: 🗂️ Get SQS Queue Names
    if: contains(steps.get-aws-services.outputs.services, 'sqs')
    id: get-sqs-queue-names
    shell: bash
    run: |
      sqs_queue_names=$(
        if [ "${{ inputs.sqs-queues }}" != "" ]
        then echo "${{ inputs.sqs-queues }}"
        else echo "${{ steps.get-service-name.outputs.service-name }}"
        fi
      )
      echo "sqs-queue-names=$sqs_queue_names" >> $GITHUB_OUTPUT

  - name: 🏗️ Create SQS Queues
    if: contains(steps.get-aws-services.outputs.services, 'sqs')
    uses: ocadotechnology/codeforlife-workspace/.github/actions/github/process-string-array@workspace-220 # TODO: set to @main
    with:
      strings: ${{ steps.get-sqs-queue-names.outputs.sqs-queue-names }}
      process_string: aws sqs create-queue --queue-name="$1"
