name: Test Python Code

on:
  workflow_call:
    inputs:
      # Python
      python-version:
        description: "The python version to set up."
        type: number
        required: false
        default: 3.12
      # Shell
      working-directory:
        description: "The current working directory."
        type: string
        required: false
        default: "."
      source-path:
        description: "The path of the source files."
        type: string
        required: false
        default: "."
      # PostgreSQL
      postgres-version:
        description: "The postgres version to set up."
        type: number
        required: false
        default: 17
      postgres-db:
        description: "The postgres database to test against."
        type: string
        required: false
        default: "db"
      postgres-user:
        description: "The postgres user to test with."
        type: string
        required: false
        default: "root"
      postgres-password:
        description: "The postgres user's password."
        type: string
        required: false
        default: "password"
      # Redis
      redis-version:
        description: "The redis version to set up."
        type: number
        required: false
        default: 7.4
      # AWS
      aws-sqs-queues:
        description: "A CSV of AWS SQS queues to create. If using Django, this will default to the service's name."
        type: string
        required: false
        default: ""
      aws-s3-buckets:
        description: "A CSV of AWS S3 buckets to create. If using Django, this will default to the service's name."
        type: string
        required: false
        default: ""
    secrets: # All secrets should not be required to support contributors.
      CODECOV_TOKEN:
        description: "The token used to gain access to Codecov."
        required: false
      SNYK_TOKEN:
        description: "The token used to authenticate with Snyk API."
        required: false

jobs:
  test-py-code:
    runs-on: ubuntu-22.04
    if: |
      github.event_name == 'push' ||
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    env:
      LANG: C.UTF-8
      SOURCE: ${{ inputs.source-path }}
      OCADO_TECH_ORG_ID: 2088731
      DB_NAME: ${{ inputs.postgres-db }}
      DB_HOST: localhost
      DB_USER: ${{ inputs.postgres-user }}
      DB_PASSWORD: ${{ inputs.postgres-password }}
      REDIS_HOST: localhost
      AWS_REGION: us-east-1
    services:
      postgres: # https://docs.github.com/en/actions/use-cases-and-examples/using-containerized-services/creating-postgresql-service-containers
        image: postgres:${{ inputs.postgres-version }}
        env:
          POSTGRES_DB: ${{ env.DB_NAME }}
          POSTGRES_HOST: ${{ env.DB_HOST }}
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        options: >- # Set health checks to wait until postgres has started
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis: # https://docs.github.com/en/actions/use-cases-and-examples/using-containerized-services/creating-redis-service-containers
        image: redis:${{ inputs.redis-version }}
        env:
          REDIS_HOST: ${{ env.REDIS_HOST }}
        options: >- # Set health checks to wait until redis has started
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: 🐍 Set up Python ${{ inputs.python-version }} Environment
        uses: ocadotechnology/codeforlife-workspace/.github/actions/python/setup-environment@main
        with:
          python-version: ${{ inputs.python-version }}
          install-args: --dev

      - name: 🗂️ Get Service Name
        if: inputs.aws-sqs-queues == '' || inputs.aws-s3-buckets == ''
        id: get-service-name
        uses: ocadotechnology/codeforlife-workspace/.github/actions/service/backend/get-name@main

      - name: 🗂️ Get AWS Resource Names
        id: get-aws-resource-names
        run: |
          function get_names() {
            local names="$1"
            if [ "$names" = "" ]; then
              names="${{ steps.get-service-name.outputs.service-name }}"
            fi

            echo "$2=$names" >> $GITHUB_OUTPUT
          }

          get_names "${{ inputs.aws-sqs-queues }}" "sqs_queues"
          get_names "${{ inputs.aws-s3-buckets }}" "s3_buckets"

      - name: 🏗️ Create AWS Resources
        if: |
          steps.get-aws-resource-names.outputs.sqs_queues != '' ||
          steps.get-aws-resource-names.outputs.s3_buckets != ''
        uses: ocadotechnology/codeforlife-workspace/.github/actions/aws/create-resources@main
        with:
          region: ${{ env.AWS_REGION }}
          sqs-queues: ${{ steps.get-aws-resource-names.outputs.sqs_queues }}
          s3-buckets: ${{ steps.get-aws-resource-names.outputs.s3_buckets }}

      - name: 🔎 Check Import Sort
        run: .workspace/backend/scripts imports:check

      - name: 🔎 Check Code Format
        run: .workspace/backend/scripts format:check

      - name: 🔎 Check Static Type Hints
        run: .workspace/backend/scripts types:check

      - name: 🔎 Check Static Code
        run: .workspace/backend/scripts code:check

      - name: 🔎 Check Django Migrations
        run: .workspace/backend/scripts migrations:check

      - name: 🧪 Test Code Units
        run: .workspace/backend/scripts test:coverage

      - name: 📈 Upload Coverage Reports to Codecov
        if: github.repository_owner_id == env.OCADO_TECH_ORG_ID
        uses: ocadotechnology/codeforlife-workspace/.github/actions/codecov/upload-report@main
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml

      - name: 🐶 Run Snyk Tests
        if: github.repository_owner_id == env.OCADO_TECH_ORG_ID
        uses: ocadotechnology/codeforlife-workspace/.github/actions/snyk/run-tests@main
        with:
          snyk-token: ${{ secrets.SNYK_TOKEN }}
          config-path: backend/.snyk
          add-test-args: --command=.venv/bin/python
