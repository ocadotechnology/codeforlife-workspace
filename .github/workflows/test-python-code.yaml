name: Test Python Code

on:
  workflow_call:
    inputs:
      python-version:
        description: "The python version to set up."
        type: number
        required: false
        default: 3.12
      working-directory:
        description: "The current working directory."
        type: string
        required: false
        default: "."
      source-path:
        description: "The path of the source files."
        type: string
        required: false
        default: "."
      check-django-migrations:
        description: "Check if there are pending Django migrations."
        type: boolean
        required: false
        default: true
      pyproject-toml-directory:
        description: "The directory where pyproject.toml is located."
        type: string
        required: false
        default: "."
      codecov-slug:
        description: "The slug provided to Codecov for the coverage report."
        type: string
        required: false
        default: ${{ github.repository }}
      codecov-yml-path:
        description: "The path of the Codecov YAML file."
        type: string
        required: false
        default: "./codecov.yml"
      postgres-version:
        description: "The postgres version to set up."
        type: number
        required: false
        default: 17
      postgres-db:
        description: "The postgres database to test against."
        type: string
        required: false
        default: "db"
      postgres-user:
        description: "The postgres user to test with."
        type: string
        required: false
        default: "root"
      postgres-password:
        description: "The postgres user's password."
        type: string
        required: false
        default: "password"
    secrets: # All secrets should not be required to support contributors.
      CODECOV_TOKEN:
        description: "The token used to gain access to Codecov."
      SNYK_TOKEN:
        description: "The token used to authenticate with Snyk API."
        required: false

jobs:
  test-py-code:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    env:
      LANG: C.UTF-8
      PYPROJECT_TOML: ${{ inputs.pyproject-toml-directory }}/pyproject.toml
      COVERAGE_REPORT: coverage.xml # NOTE: COVERAGE_FILE is reserved - do not use.
      OCADO_TECH_ORG_ID: 2088731
      DB_NAME: ${{ inputs.postgres-db }}
      DB_HOST: localhost
      DB_USER: ${{ inputs.postgres-user }}
      DB_PASSWORD: ${{ inputs.postgres-password }}
    services:
      postgres: # https://docs.github.com/en/actions/use-cases-and-examples/using-containerized-services/creating-postgresql-service-containers
        image: postgres:${{ inputs.postgres-version }}
        env:
          POSTGRES_DB: ${{ env.DB_NAME }}
          POSTGRES_HOST: ${{ env.DB_HOST }}
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        options: >- # Set health checks to wait until postgres has started
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: üêç Set up Python ${{ inputs.python-version }} Environment
        uses: ocadotechnology/codeforlife-workspace/.github/actions/python/setup-environment@main
        with:
          python-version: ${{ inputs.python-version }}
          install-args: --dev #--system
      
      - name: Echo CWD
        run: |
          echo "$GITHUB_WORKSPACE"
          echo "${{ github.workspace }}"
          .venv/bin/python --version
          .venv/bin/python -c "import sys; print('\n'.join(sys.path))"
          ${{ github.workspace }}/.venv/bin/python --version
          ${{ github.workspace }}/.venv/bin/python -c "import sys; print('\n'.join(sys.path))"
          echo PATH=${GITHUB_WORKSPACE}/.venv/bin:$PATH >> $GITHUB_ENV
          echo PATH=${GITHUB_WORKSPACE}/.venv:$PATH >> $GITHUB_ENV
          echo PATH=${GITHUB_WORKSPACE}:$PATH >> $GITHUB_ENV

      - name: üìù Generate requirements.txt
        if: github.repository_owner_id == env.OCADO_TECH_ORG_ID
        run: pipenv requirements > requirements.txt

      - name: üì• Download Snyk Config File
        if: github.repository_owner_id == env.OCADO_TECH_ORG_ID
        uses: ocadotechnology/codeforlife-workspace/.github/actions/workspace/download-config-file@snyk # TODO: set to @main
        with:
          branch: snyk # TODO: delete
          path: backend/.snyk
          save-to: .snyk
      
      - name: üóÇÔ∏è Get Repo's Name
        if: github.repository_owner_id == env.OCADO_TECH_ORG_ID
        id: get-repo-name
        uses: ocadotechnology/codeforlife-workspace/.github/actions/github/get-repo-name@snyk # TODO: set to @main

      - name: üîé Monitor Open-Source Vulnerabilities and License Issues
        if: github.repository_owner_id == env.OCADO_TECH_ORG_ID
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor # https://docs.snyk.io/snyk-cli/commands/monitor
          args: --package-manager=pip --file=requirements.txt --project-name=${{ steps.get-repo-name.outputs.repo-name }} --project-environment=backend --command=${{ github.workspace }}/.venv/bin/python

      - name: üîé Check Open-Source Vulnerabilities and License Issues
        if: github.repository_owner_id == env.OCADO_TECH_ORG_ID
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test # https://docs.snyk.io/snyk-cli/commands/test
          args: --severity-threshold=medium --package-manager=pip --file=requirements.txt --project-name=${{ steps.get-repo-name.outputs.repo-name }} --command=${{ github.workspace }}/.venv/bin/python

      - name: üîé Check Known Security Issues
        if: github.repository_owner_id == env.OCADO_TECH_ORG_ID
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test # https://docs.snyk.io/snyk-cli/commands/code-test
          args: --severity-threshold=medium

      - name: üîé Check Import Sort
        run: pipenv run isort --settings-file=${{ env.PYPROJECT_TOML }} --check ${{ inputs.source-path }}

      - name: üîé Check Code Format
        run: if ! pipenv run black --config=${{ env.PYPROJECT_TOML }} --check ${{ inputs.source-path }}; then exit 1; fi

      - name: üîé Check Static Type Hints
        run: pipenv run mypy --config-file=${{ env.PYPROJECT_TOML }} ${{ inputs.source-path }}

      - name: üîé Check Static Code
        run: |
          echo 'Linting non-test files'

          if ! pipenv run pylint --rcfile=${{ env.PYPROJECT_TOML }} $(
            git ls-files \
            '${{ inputs.source-path }}/*.py' \
            '${{ inputs.source-path }}/**/*.py' \
            ':!${{ inputs.source-path }}/test_*.py' \
            ':!${{ inputs.source-path }}/**/test_*.py' \
            ':!${{ inputs.source-path }}/*_test.py' \
            ':!${{ inputs.source-path }}/**/*_test.py'
          )
            then exit 1
          fi

          echo 'Linting test files'

          if ! pipenv run pylint --rcfile=${{ env.PYPROJECT_TOML }} --disable=duplicate-code $(
            git ls-files \
            '${{ inputs.source-path }}/test_*.py' \
            '${{ inputs.source-path }}/**/test_*.py' \
            '${{ inputs.source-path }}/*_test.py' \
            '${{ inputs.source-path }}/**/*_test.py'
          )
            then exit 1
          fi

      - name: üîé Check Django Migrations
        if: inputs.check-django-migrations
        run: pipenv run python manage.py makemigrations --check --dry-run

      - name: üß™ Test Code Units
        run: |
          if [ ${{ github.repository_owner_id }} = ${{ env.OCADO_TECH_ORG_ID }} ]
          then
            pipenv run pytest \
              -n=auto \
              --cov=${{ inputs.source-path }} \
              --cov-report=xml:${{ env.COVERAGE_REPORT }} \
              -c=${{ env.PYPROJECT_TOML }} \
              ${{ inputs.source-path }}
          else
            pipenv run pytest \
              -n=auto \
              --cov=${{ inputs.source-path }} \
              --cov-fail-under=90 \
              -c=${{ env.PYPROJECT_TOML }} \
              ${{ inputs.source-path }}
          fi

      - name: üìà Upload Coverage Reports to Codecov
        if: github.repository_owner_id == env.OCADO_TECH_ORG_ID
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ${{ inputs.codecov-slug }}
          codecov_yml_path: ${{ inputs.codecov-yml-path }}
          file: ${{ env.COVERAGE_REPORT }}
