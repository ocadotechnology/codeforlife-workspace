name: Test Python Code

on:
  workflow_call:
    inputs:
      python-version:
        description: "The python version to set up."
        type: number
        required: false
        default: 3.8
      working-directory:
        description: "The current working directory."
        type: string
        required: false
        default: "."
      source-path:
        description: "The path of the source files."
        type: string
        required: false
        default: "."
      check-django-migrations:
        description: "Check if there are pending Django migrations."
        type: boolean
        required: false
        default: true
      pyproject-toml-directory:
        description: "The directory where pyproject.toml is located."
        type: string
        required: false
        default: "."
      codecov-slug:
        description: "The slug provided to Codecov for the coverage report."
        type: string
        required: false
        default: ${{ github.repository }}
      codecov-yml-path:
        description: "The path of the Codecov YAML file."
        type: string
        required: false
        default: "./codecov.yml"
    secrets:
      CODECOV_TOKEN:
        description: "The token used to gain access to Codecov."
        required: false # Needs to be false to support contributors

jobs:
  test-py-code:
    runs-on: ubuntu-latest
    env:
      PYPROJECT_TOML: ${{ inputs.pyproject-toml-directory }}/pyproject.toml
      COVERAGE_REPORT: coverage.xml # NOTE: COVERAGE_FILE is reserved - do not use.
      OCADO_TECH_ORG_ID: 2088731
    steps:
      - name: üõ´ Checkout
        uses: actions/checkout@v4

      - name: üêç Set up Python ${{ inputs.python-version }} Environment
        uses: ocadotechnology/codeforlife-workspace/.github/actions/python/setup-environment@main
        with:
          python-version: ${{ inputs.python-version }}
          working-directory: ${{ inputs.working-directory }}
          install-args: --dev

      - name: üîé Check Import Sort
        working-directory: ${{ inputs.working-directory }}
        run: pipenv run isort --settings-file=${{ env.PYPROJECT_TOML }} --check ${{ inputs.source-path }}

      - name: üîé Check Code Format
        working-directory: ${{ inputs.working-directory }}
        run: if ! pipenv run black --config=${{ env.PYPROJECT_TOML }} --check ${{ inputs.source-path }}; then exit 1; fi

      - name: üîé Check Static Type Hints
        working-directory: ${{ inputs.working-directory }}
        run: pipenv run mypy --config-file=${{ env.PYPROJECT_TOML }} ${{ inputs.source-path }}

      - name: üîé Check Static Code
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo 'Linting non-test files'

          if ! pipenv run pylint --rcfile=${{ env.PYPROJECT_TOML }} $(
            git ls-files \
            '${{ inputs.source-path }}/*.py' \
            '${{ inputs.source-path }}/**/*.py' \
            ':!${{ inputs.source-path }}/test_*.py' \
            ':!${{ inputs.source-path }}/**/test_*.py' \
            ':!${{ inputs.source-path }}/*_test.py' \
            ':!${{ inputs.source-path }}/**/*_test.py'
          )
            then exit 1
          fi

          echo 'Linting test files'

          if ! pipenv run pylint --rcfile=${{ env.PYPROJECT_TOML }} --disable=duplicate-code $(
            git ls-files \
            '${{ inputs.source-path }}/test_*.py' \
            '${{ inputs.source-path }}/**/test_*.py' \
            '${{ inputs.source-path }}/*_test.py' \
            '${{ inputs.source-path }}/**/*_test.py'
          )
            then exit 1
          fi

      - name: üîé Check Django Migrations
        if: inputs.check-django-migrations
        working-directory: ${{ inputs.working-directory }}
        run: pipenv run python manage.py makemigrations --check --dry-run

      - name: üß™ Test Code Units
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ ${{ github.repository_owner_id }} = ${{ env.OCADO_TECH_ORG_ID }} ]
          then
            pipenv run pytest \
              -n=auto \
              --cov=${{ inputs.source-path }} \
              --cov-report=xml:${{ env.COVERAGE_REPORT }} \
              -c=${{ env.PYPROJECT_TOML }} \
              ${{ inputs.source-path }}
          else
            pipenv run pytest \
              -n=auto \
              --cov=${{ inputs.source-path }} \
              --cov-fail-under=90 \
              -c=${{ env.PYPROJECT_TOML }} \
              ${{ inputs.source-path }}
          fi

      - name: üìà Upload Coverage Reports to Codecov
        if: github.repository_owner_id == env.OCADO_TECH_ORG_ID
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ${{ inputs.codecov-slug }}
          codecov_yml_path: ${{ inputs.codecov-yml-path }}
          working-directory: ${{ inputs.working-directory }}
          file: ${{ env.COVERAGE_REPORT }}
