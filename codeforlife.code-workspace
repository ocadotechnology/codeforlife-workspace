{
  "folders": [
    { "path": "." },
    { "path": "codeforlife-contributor-backend" },
    { "path": "codeforlife-contributor-frontend" },
    // { "path": "codeforlife-deploy-appengine" },
    { "path": "codeforlife-package-javascript" },
    { "path": "codeforlife-package-python" },
    { "path": "codeforlife-portal" },
    { "path": "codeforlife-portal-backend" },
    { "path": "codeforlife-portal-frontend" },
    // TODO: uncomment these as we begin restructuring them.
    // { "path": "codeforlife-rapid-router-backend" },
    // { "path": "codeforlife-rapid-router-frontend" },
    { "path": "codeforlife-scheduler-backend" },
    // { "path": "codeforlife-sso-backend" },
    // { "path": "codeforlife-sso-frontend" },
    { "path": "codeforlife-template-backend" },
    { "path": "codeforlife-template-frontend" },
    { "path": "rapid-router" }
  ],
  "settings": {
    // General
    "editor.tabSize": 2,
    "editor.codeActionsOnSave": {
      "source.organizeImports": "explicit"
    },
    "editor.formatOnSave": true,
    "editor.rulers": [80],
    "workbench.colorCustomizations": {
      "editorRuler.foreground": "#008000"
    },
    "files.eol": "\n",
    "files.exclude": {
      // Python
      "**/.hypothesis": true,
      "**/.mypy_cache": true,
      "**/.pytest_cache": true,
      "**/__pycache__": true,
      "**/.coverage": true,
      // JavaScript
      "**/*.tsbuildinfo": true
    },
    "files.watcherExclude": {
      // General
      "**/.git/**": true,
      "**/dist/**": true,
      "**/build/**": true,
      // Python
      "**/.mypy_cache/**": true,
      "**/.pytest_cache/**": true,
      "**/__pycache__/**": true,
      "**/.venv/**": true,
      "**/static/**": true,
      "**/htmlcov/**": true,
      // JavaScript
      "**/node_modules/**": true,
      "**/coverage/**": true
    },
    "testing.defaultGutterClickAction": "debug",
    "cSpell.words": ["codeforlife", "klass", "ocado", "kurono", "pipenv"],
    // Markdown
    "[md]": {
      "editor.tabSize": 4
    },
    // Shell
    "[shellscript]": {
      "editor.defaultFormatter": "foxundermoon.shell-format"
    },
    // Python
    "python.defaultInterpreterPath": ".venv/bin/python",
    "python.testing.pytestArgs": [
      "-n=auto",
      "--cov=src",
      "--cov-report=html",
      "-c=/codeforlife-workspace/configs/backend/pyproject.toml",
      "src"
    ],
    "python.testing.pytestEnabled": true,
    "python.testing.unittestEnabled": false,
    "python.analysis.extraPaths": [
      // Uncomment if installing locally in editable mode.
      // "/codeforlife-workspace/codeforlife-package-python"
    ],
    "[python]": {
      "editor.defaultFormatter": "ms-python.black-formatter",
      "editor.tabSize": 4
    },
    "autoDocstring.customTemplatePath": "/codeforlife-workspace/configs/backend/python-docstring.mustache",
    "black-formatter.args": [
      "--config",
      "/codeforlife-workspace/configs/backend/pyproject.toml"
    ],
    "black-formatter.path": [".venv/bin/python", "-m", "black"],
    "isort.args": [
      "--settings-file=/codeforlife-workspace/configs/backend/pyproject.toml"
    ],
    "isort.path": [".venv/bin/python", "-m", "isort"],
    "mypy-type-checker.args": [
      "--config-file=/codeforlife-workspace/configs/backend/pyproject.toml"
    ],
    "mypy-type-checker.path": [".venv/bin/python", "-m", "mypy"],
    "pylint.args": [
      "--rcfile=/codeforlife-workspace/configs/backend/pyproject.toml"
    ],
    "pylint.path": [".venv/bin/python", "-m", "pylint"],
    // Database
    // TODO: create workflow to update sql connections for each BE service.
    "sqltools.connections": [
      {
        "previewLimit": 50,
        "server": "db",
        "port": 5432,
        "driver": "PostgreSQL",
        "name": "contributor",
        "database": "contributor",
        "username": "root",
        "password": "password"
      },
      {
        "previewLimit": 50,
        "server": "db",
        "port": 5432,
        "driver": "PostgreSQL",
        "name": "portal",
        "database": "portal",
        "username": "root",
        "password": "password"
      },
      {
        "previewLimit": 50,
        "server": "db",
        "port": 5432,
        "driver": "PostgreSQL",
        "name": "sso",
        "database": "sso",
        "username": "root",
        "password": "password"
      },
      {
        "previewLimit": 50,
        "server": "db",
        "port": 5432,
        "driver": "PostgreSQL",
        "name": "template",
        "database": "template",
        "username": "root",
        "password": "password"
      }
    ],
    // JavaScript, JavaScript React, TypeScript, TypeScript React
    "javascript.format.semicolons": "remove",
    "javascript.preferences.quoteStyle": "double",
    "typescript.format.semicolons": "remove",
    "typescript.preferences.quoteStyle": "double",
    "[javascript]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode",
      "editor.codeActionsOnSave": {
        "source.fixAll.eslint": "always",
        "source.organizeImports": "never"
      }
    },
    "[javascriptreact]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode",
      "editor.codeActionsOnSave": {
        "source.fixAll.eslint": "always",
        "source.organizeImports": "never"
      }
    },
    "[typescript]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode",
      "editor.codeActionsOnSave": {
        "source.fixAll.eslint": "always",
        "source.organizeImports": "never"
      }
    },
    "[typescriptreact]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode",
      "editor.codeActionsOnSave": {
        "source.fixAll.eslint": "always",
        "source.organizeImports": "never"
      }
    },
    "prettier.configPath": "/codeforlife-workspace/configs/frontend/.prettierrc.json",
    "prettier.ignorePath": "/codeforlife-workspace/configs/frontend/.prettierignore",
    "eslint.useFlatConfig": true,
    // JSON
    "[json]": { "editor.defaultFormatter": "esbenp.prettier-vscode" },
    // GraphQL
    "[graphql]": { "editor.defaultFormatter": "esbenp.prettier-vscode" },
    // Handlebars
    "[handlebars]": { "editor.defaultFormatter": "esbenp.prettier-vscode" }
  },
  "tasks": {
    "version": "2.0.0",
    "inputs": [
      {
        "id": "backend-folder",
        "type": "pickString",
        "description": "Select the backend folder.",
        "options": [
          "codeforlife-scheduler-backend",
          "codeforlife-package-python",
          "codeforlife-portal-backend",
          "codeforlife-contributor-backend",
          "codeforlife-template-backend",
          "codeforlife-sso-backend",
          "codeforlife-rapid-router-backend"
        ]
      },
      {
        "id": "frontend-folder",
        "type": "pickString",
        "description": "Select the frontend folder.",
        "options": [
          "codeforlife-package-javascript",
          "codeforlife-portal-frontend",
          "codeforlife-contributor-frontend",
          "codeforlife-template-frontend",
          "codeforlife-sso-frontend",
          "codeforlife-rapid-router-frontend"
        ]
      },
      {
        "id": "remember-frontend-service",
        "type": "command",
        "command": "extension.commandvariable.transform",
        "args": {
          "text": "${remember:frontend-service}"
        }
      },
      {
        "id": "args",
        "type": "promptString",
        "description": "Expected Format: \"{func} {arg1} {arg2} ...\"."
      },
      {
        "id": "scripts:frontend:run:client:terminate",
        "type": "command",
        "command": "workbench.action.tasks.terminate",
        "args": "scripts:frontend:run:client"
      }
    ],
    "tasks": [
      {
        "label": "scripts:backend",
        "command": "sudo chmod +x /codeforlife-workspace/scripts/backend && /codeforlife-workspace/scripts/backend ${input:args}",
        "type": "shell",
        "problemMatcher": [],
        "options": {
          "cwd": "/codeforlife-workspace/${input:backend-folder}"
        }
      },
      {
        "label": "scripts:frontend",
        "command": "sudo chmod +x /codeforlife-workspace/scripts/frontend && /codeforlife-workspace/scripts/frontend ${input:args}",
        "type": "shell",
        "problemMatcher": [],
        "options": {
          "cwd": "/codeforlife-workspace/${input:frontend-folder}"
        }
      },
      {
        "label": "scripts:frontend:run:client",
        "command": "sudo chmod +x /codeforlife-workspace/scripts/frontend && /codeforlife-workspace/scripts/frontend run:client",
        "type": "shell",
        "problemMatcher": [],
        "isBackground": true,
        "options": {
          "cwd": "/codeforlife-workspace/${input:remember-frontend-service}",
          "env": {
            "BROWSER": "none"
          }
        }
      },
      {
        "label": "scripts:frontend:run:client:terminate",
        "command": "echo ${input:scripts:frontend:run:client:terminate}",
        "type": "shell",
        "problemMatcher": []
      }
    ]
  },
  "launch": {
    "version": "0.2.0",
    "inputs": [
      {
        "id": "backend-service",
        "type": "command",
        "command": "extension.commandvariable.pickStringRemember",
        "args": {
          "key": "backend-service",
          "description": "Select the backend service.",
          "options": [
            "codeforlife-package-python",
            "codeforlife-portal-backend",
            "codeforlife-contributor-backend",
            "codeforlife-template-backend",
            "codeforlife-sso-backend",
            "codeforlife-rapid-router-backend"
          ]
        }
      },
      {
        "id": "frontend-service",
        "type": "command",
        "command": "extension.commandvariable.pickStringRemember",
        "args": {
          "key": "frontend-service",
          "description": "Select the frontend service.",
          "options": [
            "codeforlife-package-javascript",
            "codeforlife-portal-frontend",
            "codeforlife-contributor-frontend",
            "codeforlife-template-frontend",
            "codeforlife-sso-frontend",
            "codeforlife-rapid-router-frontend"
          ]
        }
      },
      {
        "id": "django-network",
        "type": "promptString",
        "description": "Expected Format: \"{host}:{port}\".",
        "default": "localhost:8000"
      }
    ],
    "configurations": [
      {
        "console": "integratedTerminal",
        "justMyCode": false,
        "name": "Python: Current File",
        "program": "${file}",
        "request": "launch",
        "type": "debugpy"
      },
      {
        "args": ["runserver", "${input:django-network}"],
        "env": {
          "SERVER_MODE": "django"
        },
        "django": true,
        "justMyCode": false,
        "name": "Django Server",
        "program": "manage.py",
        "request": "launch",
        "type": "debugpy",
        "cwd": "/codeforlife-workspace/${input:backend-service}"
      },
      {
        "env": {
          "SERVER_MODE": "celery"
        },
        "justMyCode": false,
        "name": "Celery Server",
        "program": "application.py",
        "request": "launch",
        "type": "debugpy",
        "cwd": "/codeforlife-workspace/${input:backend-service}"
      },
      // https://code.visualstudio.com/docs/python/testing
      {
        "env": {
          "PYTEST_ADDOPTS": "--no-cov"
        },
        "justMyCode": false,
        "name": "Pytest",
        "presentation": {
          "hidden": true
        },
        "request": "launch",
        "type": "debugpy",
        "purpose": ["debug-test"]
      },
      {
        "name": "Vite Server",
        "preLaunchTask": "scripts:frontend:run:client",
        "postDebugTask": "scripts:frontend:run:client:terminate",
        "request": "launch",
        "type": "chrome",
        "url": "http://localhost:5173",
        "webRoot": "/codeforlife-workspace/${input:frontend-service}"
      }
      // TODO: Vitest Debug
      // https://vitest.dev/guide/debugging.html#vs-code
    ]
  },
  "extensions": {
    "unwantedRecommendations": ["ms-azuretools.vscode-docker"]
  }
}
